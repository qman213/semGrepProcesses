rules:
- id: python.lang.maintainability.useless-assign-keyed.useless-assignment-keyed
  message: key `$Y` in `$X` is assigned twice; the first assignment is useless
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: |
      $X[$Y] = ...
      $X[$Y] = ...
  - pattern: |
      $X[$Y][$Z] = ...
      $X[$Y][$Z] = ...
  metadata:
    category: maintainability
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.maintainability.useless-assign-keyed.useless-assignment-keyed
- id: python.django.correctness.use-decimalfield-for-money.use-decimalfield-for-money
  patterns:
  - pattern-inside: |
      class $M(...):
        ...
  - pattern: $F = django.db.models.FloatField(...)
  - metavariable-regex:
      metavariable: $F
      regex: .*(price|amount|subtotal|donation|fee|salary|precio).*
  message: Found a FloatField used for variable $F. Use DecimalField for currency
    fields to avoid float-rounding errors.
  languages:
  - python
  severity: ERROR
  metadata:
    category: correctness
    technology:
    - django
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.correctness.use-decimalfield-for-money.use-decimalfield-for-money
- id: python.django.best-practice.use-onetoonefield.use-onetoonefield
  patterns:
  - pattern-inside: |
      class $M(...):
        ...
  - pattern: $F = django.db.models.ForeignKey(..., unique=True, ...)
  message: |
    Use 'django.db.models.OneToOneField' instead of 'ForeignKey' with unique=True.
    'OneToOneField' is used to create one-to-one relationships.
  languages:
  - python
  severity: WARNING
  metadata:
    category: best-practice
    technology:
    - django
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.best-practice.use-onetoonefield.use-onetoonefield
- id: python.lang.correctness.return-in-init.yield-in-init
  patterns:
  - pattern-inside: |
      class $A(...):
          ...
  - pattern-inside: |
      def __init__(...):
          ...
  - pattern-either:
    - pattern: yield ...
    - pattern: yield
  message: '`yield` should never appear inside a class __init__ function. This will
    cause a runtime error.'
  languages:
  - python
  severity: ERROR
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.return-in-init.yield-in-init
- id: python.lang.best-practice.hardcoded-tmp-path.hardcoded-tmp-path
  pattern: open("=~/^\/tmp.*/", ...)
  message: |
    Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.
  metadata:
    references:
    - https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.best-practice.hardcoded-tmp-path.hardcoded-tmp-path
  severity: WARNING
  languages:
  - python
- id: python.lang.correctness.unchecked-returns.unchecked-subprocess-call
  patterns:
  - pattern: subprocess.call(...)
  - pattern-not-inside: $S = subprocess.call(...)
  - pattern-not-inside: subprocess.call(...) == $X
  - pattern-not-inside: return subprocess.call(...)
  fix: subprocess.check_call(...)
  message: This is not checking the return value of this subprocess call; if it fails
    no exception will be raised. Consider subprocess.check_call() instead
  languages:
  - python
  severity: WARNING
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.unchecked-returns.unchecked-subprocess-call
- id: python.django.correctness.model-save.django-db-model-save-super
  patterns:
  - pattern-inside: |
      class $MODEL(django.db.models.Model):
          ...
  - pattern-not: |
      def save(self, ...):
        ...
        super($MODEL, self).save(...)
  - pattern-not: |
      def save(self, ...):
        ...
        super().save(...)
  - pattern: |
      def save(self, ...):
        ...
  message: Detected a django model `$MODEL` is not calling super().save() inside of
    the save method.
  languages:
  - python
  severity: WARNING
  metadata:
    category: correctness
    technology:
    - django
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.correctness.model-save.django-db-model-save-super
- id: go.lang.best-practice.hidden-goroutine.hidden-goroutine
  patterns:
  - pattern-not: |
      func $FUNC(...) {
        go func() {
          ...
        }(...)
        $MORE
      }
  - pattern: |
      func $FUNC(...) {
        go func() {
          ...
        }(...)
      }
  message: |
    Detected a hidden goroutine. Function invocations are expected to synchronous,
    and this function will execute asynchronously because all it does is call a
    goroutine. Instead, remove the internal goroutine and call the function using 'go'.
  languages:
  - go
  severity: WARNING
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.best-practice.hidden-goroutine.hidden-goroutine
- id: ocaml.lang.correctness.useless_if.ocamllint-useless-if
  pattern: if $X then $E else $E
  message: Useless if. Both branches are equal.
  languages:
  - ocaml
  severity: ERROR
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.correctness.useless_if.ocamllint-useless-if
- id: python.lang.correctness.list-modify-iterating.list-modify-while-iterate
  message: |
    It appears that `$LIST` is a list that is being modified while in a for loop.
    This will likely cause a runtime error or an infinite loop.
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: |
      for $ELEMENT in $LIST:
        ...
        $LIST.pop(...)
  - pattern: |
      for $ELEMENT in $LIST:
        ...
        $LIST.push(...)
  - pattern: |
      for $ELEMENT in $LIST:
        ...
        $LIST.append(...)
  - pattern: |
      for $ELEMENT in $LIST:
        ...
        $LIST.extend(...)
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.list-modify-iterating.list-modify-while-iterate
- id: python.lang.correctness.concurrent.uncaught-executor-exceptions
  patterns:
  - pattern-inside: |
      with concurrent.futures.thread.ThreadPoolExecutor(...) as $EXECUTOR:
        ...
  - pattern-not-inside: |
      $VAR = $EXECUTOR.map(...)
      ...
      for ... in $VAR:
        ...
  - pattern-not-inside: |
      $VAR = $EXECUTOR.map(...)
      ...
      [... for ... in $VAR]
  - pattern-not-inside: |
      [... for ... in $EXECUTOR.map(...)]
  - pattern-not-inside: |
      for $IT in $EXECUTOR.map(...):
        ...
  - pattern: $EXECUTOR.map(...)
  message: |
    Values returned by thread pool map must be read in order to raise exceptions. Consider using `for _ in $EXECUTOR.map(...): pass`.
  fix: ''
  severity: WARNING
  languages:
  - python
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.concurrent.uncaught-executor-exceptions
- id: python.django.performance.access-foreign-keys.access-foreign-keys
  pattern: $X.user.id
  message: You should use ITEM.user_id rather than ITEM.user.id to prevent running
    an extra query.
  languages:
  - python
  severity: WARNING
  metadata:
    category: performance
    technology:
    - django
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.performance.access-foreign-keys.access-foreign-keys
- id: java.lang.correctness.eqeq.eqeq
  patterns:
  - pattern-not-inside: assert $X;
  - pattern-not-inside: |
      assert $X : $Y;
  - pattern-either:
    - pattern: $X == $X
    - pattern: $X != $X
  - pattern-not: 1 == 1
  message: |
    `$X == $X` or `$X != $X` is always true. (Unless the value compared is a float or double).
    To test if `$X` is not-a-number, use `Double.isNaN($X)`.
  languages:
  - java
  severity: ERROR
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.correctness.eqeq.eqeq
- id: python.lang.compatibility.python37.python37-compatibility-importlib2
  pattern: import importlib.resources
  message: this module is only available on Python 3.7+; use importlib_resources for
    older Python versions
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-importlib2
- id: python.lang.correctness.common-mistakes.is-comparison-string.identical-is-comparison
  pattern: $S is $S
  message: Found identical comparison using is. Ensure this is what you intended.
  languages:
  - python
  severity: ERROR
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.common-mistakes.is-comparison-string.identical-is-comparison
- id: python.lang.correctness.file-object-redefined-before-close.file-object-redefined-before-close
  patterns:
  - pattern: |
      $F = open($X, ...)
      ...
      $F = open($Y, ...)
  - pattern-not: |
      $F = open($X, ...)
      ...
      $F.close()
      ...
      $F = open($Y, ...)
  message: |
    Detected a file object that is redefined and never closed. This
    could leak file descriptors and unnecessarily consume system resources.
  languages:
  - python
  severity: WARNING
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.file-object-redefined-before-close.file-object-redefined-before-close
- id: python.lang.compatibility.python37.python37-compatibility-pdb
  pattern: pdb.set_trace(header=$X, ...)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-pdb
- id: python.lang.correctness.return-in-init.return-in-init
  patterns:
  - pattern-inside: |
      class $A(...):
          ...
  - pattern-inside: |
      def __init__(...):
          ...
  - patterns:
    - pattern: return ...
    - pattern-not: return
    - pattern-not: return None
  message: '`return` should never appear inside a class __init__ function. This will
    cause a runtime error.'
  languages:
  - python
  severity: ERROR
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.return-in-init.return-in-init
- id: python.django.best-practice.upsell_django_environ.use-django-environ
  patterns:
  - pattern-not: |
      ...
      import environ
      ...
  - pattern-either:
    - pattern: |
        import django
        ...
        import os
        ...
        $FOO = $M.environ[...]
    - pattern: |
        import os
        ...
        import django
        ...
        $FOO = $M.environ[...]
  message: You are using environment variables inside django app. Use `django-environ`
    as it a better alternative for deployment.
  languages:
  - python
  severity: ERROR
  metadata:
    category: best-practice
    technology:
    - django
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.best-practice.upsell_django_environ.use-django-environ
- id: go.lang.best-practice.channel-guarded-with-mutex.channel-guarded-with-mutex
  pattern-either:
  - pattern: |
      $MUX.Lock()
      $VALUE <- $CHANNEL
      $MUX.Unlock()
  - pattern: |
      $MUX.Lock()
      $VALUE = <- $CHANNEL
      $MUX.Unlock()
  message: |
    Detected a channel guarded with a mutex. Channels already have
    an internal mutex, so this is unnecessary. Remove the mutex.
    See https://hackmongo.com/page/golang-antipatterns/#guarded-channel
    for more information.
  languages:
  - go
  severity: WARNING
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.best-practice.channel-guarded-with-mutex.channel-guarded-with-mutex
- id: go.lang.correctness.permissions.file_permission.incorrect-default-permission
  message: Expect permissions to be `0600` or less for os.Chmod, os.Mkdir, os.OpenFile,
    os.MkdirAll, and ioutil.WriteFile
  metadata:
    cwe: 'CWE-276: Incorrect Default Permissions'
    source_rule_url: https://github.com/securego/gosec
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.correctness.permissions.file_permission.incorrect-default-permission
  severity: WARNING
  languages:
  - go
  patterns:
  - pattern-either:
    - pattern: os.Chmod($NAME, $PERM)
    - pattern: os.Mkdir($NAME, $PERM)
    - pattern: os.OpenFile($NAME, $FLAG, $PERM)
    - pattern: os.MkdirAll($NAME, $PERM)
    - pattern: ioutil.WriteFile($NAME, $DATA, $PERM)
  - metavariable-comparison:
      metavariable: $PERM
      comparison: $PERM > 0o600
      base: 8
- id: go.lang.correctness.overflow.overflow.integer-overflow-int32
  message: Potential Integer overflow made by strconv.Atoi result conversion to int32
  languages:
  - go
  severity: WARNING
  patterns:
  - pattern: |
      $F, $ERR := strconv.Atoi($NUM)
      ...
      int32($F)
  - metavariable-comparison:
      metavariable: $NUM
      comparison: $NUM > 2147483647 or $NUM < -2147483648
      strip: true
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.correctness.overflow.overflow.integer-overflow-int32
- id: java.lang.correctness.hardcoded-conditional.hardcoded-conditional
  message: useless if statement, always the same behavior
  languages:
  - java
  severity: ERROR
  pattern-either:
  - pattern: if (<... true ...>) { ... }
  - pattern: if (<... false ...>) { ... }
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.correctness.hardcoded-conditional.hardcoded-conditional
- id: python.flask.best-practice.use-jsonify.use-jsonify
  patterns:
  - pattern-inside: |
      @app.route(...)
      def $X():
        ...
  - pattern-either:
    - pattern: return json.dumps(...)
    - pattern: |
        $DATA = json.dumps(...)
        ...
        return <... $DATA ...>
  fix-regex:
    regex: (json\.){0,1}dumps
    replacement: flask.jsonify
    count: 1
  message: flask.jsonify() is a Flask helper method which handles the correct settings
    for returning JSON from Flask routes
  languages:
  - python
  severity: ERROR
  metadata:
    category: best-practice
    technology:
    - flask
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.best-practice.use-jsonify.use-jsonify
- id: python.lang.compatibility.python36.python36-compatibility-Popen2
  pattern: subprocess.Popen(encoding=$X, ...)
  message: the `encoding` argument to Popen is only available on Python 3.6+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python36.python36-compatibility-Popen2
- id: python.lang.maintainability.return.code-after-unconditional-return
  pattern: |
    return ...
    $S
  message: code after return statement will not be executed
  languages:
  - python
  severity: WARNING
  metadata:
    category: maintainability
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.maintainability.return.code-after-unconditional-return
- id: java.lang.correctness.assignment-comparison.assignment-comparison
  message: The value of `$X` is being ignored and will be used in the conditional
    test
  languages:
  - java
  severity: ERROR
  pattern-either:
  - pattern: if ($X=true) { ... }
  - pattern: if ($X=false) { ... }
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.correctness.assignment-comparison.assignment-comparison
- id: python.lang.compatibility.python36.python36-compatibility-Popen1
  pattern: subprocess.Popen(errors=$X, ...)
  message: the `errors` argument to Popen is only available on Python 3.6+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python36.python36-compatibility-Popen1
- id: javascript.lang.correctness.useless-eqeq.eqeq-is-bad
  patterns:
  - pattern-not-inside: assert(...)
  - pattern-either:
    - pattern: $X == $X
    - pattern: $X != $X
  - pattern-not: 1 == 1
  message: |
    Detected a useless comparison operation `$X == $X` or `$X != $X`. This
    operation is always true.
    If testing for floating point NaN, use `math.isnan`, or
    `cmath.isnan` if the number is complex.
  languages:
  - javascript
  - typescript
  severity: ERROR
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.correctness.useless-eqeq.eqeq-is-bad
- id: javascript.lang.correctness.useless-assign.useless-assignment
  patterns:
  - pattern: |
      $X = $Y;
      $X = $Z;
  - pattern-not: |
      $X = $Y;
      $X = <... $X ...>;
  message: '`$X` is assigned twice; the first assignment is useless'
  languages:
  - javascript
  - typescript
  severity: WARNING
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.correctness.useless-assign.useless-assignment
- id: java.lang.correctness.no-string-eqeq.no-string-eqeq
  languages:
  - java
  patterns:
  - pattern-not: null == (String $Y)
  - pattern: $X == (String $Y)
  message: |
    Strings should not be compared with '=='.
    This is a reference comparison operator.
    Use '.equals()' instead.
  severity: WARNING
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.correctness.no-string-eqeq.no-string-eqeq
- id: python.lang.compatibility.python37.python37-compatability-os-module
  patterns:
  - pattern-not-inside: |
      if hasattr(os, 'pwrite'):
          ...
  - pattern: os.pwrite(...)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatability-os-module
- id: python.lang.compatibility.python37.python37-compatibility-os2-ok2
  patterns:
  - pattern-not-inside: |
      if hasattr(os, 'pwritev'):
          ...
  - pattern: os.pwritev(...)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-os2-ok2
- id: javascript.lang.correctness.no-replaceall.no-replaceall
  message: |
    The string method replaceAll is not supported in all versions of javascript, and is not supported by older browser versions. Consider using replace() with a regex as the first argument instead like mystring.replace(/bad/g, "good") instead of mystring.replaceAll("bad", "good") (https://discourse.threejs.org/t/replaceall-is-not-a-function/14585)
  severity: WARNING
  languages:
  - javascript
  - typescript
  pattern: $STRING.replaceAll("...",$NEW)
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.correctness.no-replaceall.no-replaceall
- id: python.lang.maintainability.useless-innerfunction.useless-inner-function
  patterns:
  - pattern-not-inside: |
      def $F(...):
          ...
          def $FF(...):
             ...
          ...
          <... $FF ...>
  - pattern-not-inside: |
      def $F(...):
          ...
          class $CLAZZ(...):
            ...
  - pattern-inside: |
      def $F(...):
        ...
        def $FF(...):
           ...
        ...
  - pattern: |
      def $FF(...):
        ...
  message: function `$FF` is defined inside a function but never used
  languages:
  - python
  severity: ERROR
  metadata:
    category: maintainability
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.maintainability.useless-innerfunction.useless-inner-function
- id: python.lang.correctness.exceptions.exceptions.raise-not-base-exception
  message: In Python3, a runtime `TypeError` will be thrown if you attempt to raise
    an object or class which does not inherit from `BaseException`
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: raise "..."
  - pattern: |
      $X: BaseException
      raise $X(...)
  - patterns:
    - pattern: raise $EXCEPTION
    - metavariable-regex:
        metavariable: $EXCEPTION
        regex: '[0-9]*\.?[0-9]+'
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.exceptions.exceptions.raise-not-base-exception
- id: python.lang.maintainability.useless-ifelse.useless-if-conditional
  message: if block checks for the same condition on both branches (`$X`)
  languages:
  - python
  severity: WARNING
  pattern: |
    if $X:
        ...
    elif $X:
        ...
  metadata:
    category: maintainability
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.maintainability.useless-ifelse.useless-if-conditional
- id: python.lang.maintainability.useless-ifelse.useless-if-body
  pattern: |
    if $X:
        $S
    else:
        $S
  message: useless if statment; both blocks have the same body
  languages:
  - python
  severity: WARNING
  metadata:
    category: maintainability
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.maintainability.useless-ifelse.useless-if-body
- id: python.lang.best-practice.pass-body.pass-body-fn
  patterns:
  - pattern-not-inside: |
      def __init__(self, ...):
          ...
  - pattern-not-inside: |
      class $A:
           ...
  - pattern: |
      def $X(...):
          pass
  message: '`pass` is the body of function $X. Consider removing this or raise NotImplementedError()
    if this is a TODO'
  languages:
  - python
  severity: WARNING
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.best-practice.pass-body.pass-body-fn
- id: javascript.lang.best-practice.assigned-undefined.assigned-undefined
  languages:
  - javascript
  - typescript
  message: '`undefined` is not a reserved keyword in Javascript, so this is "valid"
    Javascript but highly confusing and likely to result in bugs.'
  pattern-either:
  - pattern: undefined = $X;
  - pattern: var undefined = $X;
  - pattern: let undefined = $X;
  - pattern: const undefined = $X;
  severity: WARNING
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.best-practice.assigned-undefined.assigned-undefined
- id: python.flask.correctness.access-request-in-wrong-handler.avoid-accessing-request-in-wrong-handler
  patterns:
  - pattern-inside: |
      @app.route(..., method="GET")
      def $X(...):
        ...
  - pattern-either:
    - pattern: |
        $Y = flask.request.json
    - pattern: |
        $Y = flask.request.form
    - pattern: |
        $Y = flask.request.data
  message: Accessing request object inside a route handle for HTTP GET command will
    throw due to missing request body.
  languages:
  - python
  severity: WARNING
  metadata:
    category: correctness
    technology:
    - flask
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.correctness.access-request-in-wrong-handler.avoid-accessing-request-in-wrong-handler
- id: python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true
  patterns:
  - pattern-inside: |
      class $M(...):
        ...
  - pattern-not: $F = django.db.models.CharField(...)
  - pattern-not: $F = django.db.models.TextField(...)
  - pattern-not: $F = django.db.models.SlugField(...)
  - pattern-not: $F = django.db.models.EmailField(...)
  - pattern-not: $F = django.db.models.FileField(...)
  - pattern-not: $F = django.db.models.ImageField(...)
  - pattern-not: $F = django.db.models.URLField(...)
  - pattern-not: $F = django.db.models.UUIDField(...)
  - pattern-not: $F = django.db.models.ManyToManyField(...)
  - pattern-not: $F = django.db.models.NullBooleanField(...)
  - pattern-not: $F = $X(..., null=True, blank=True, ...)
  - pattern: $F = $X(..., blank=True, ...)
  message: null=True should be set if blank=True is set on non-text fields.
  languages:
  - python
  severity: ERROR
  metadata:
    category: correctness
    technology:
    - django
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true
- id: go.lang.correctness.overflow.overflow.integer-overflow-int16
  message: Potential Integer overflow made by strconv.Atoi result conversion to int16
  languages:
  - go
  severity: WARNING
  patterns:
  - pattern: |
      $F, $ERR := strconv.Atoi($NUM)
      ...
      int16($F)
  - metavariable-comparison:
      metavariable: $NUM
      comparison: $NUM > 32767 or $NUM < -32768
      strip: true
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.correctness.overflow.overflow.integer-overflow-int16
- id: python.lang.correctness.useless-eqeq.useless-eqeq
  patterns:
  - pattern-not-inside: |
      def __eq__(...):
          ...
  - pattern-not-inside: |
      def __cmp__(...):
          ...
  - pattern-not-inside: assert(...)
  - pattern-not-inside: assert ..., ...
  - pattern-not-inside: assertTrue(...)
  - pattern-not-inside: assertFalse(...)
  - pattern-either:
    - pattern: $X == $X
    - pattern: $X != $X
  - pattern-not: 1 == 1
  message: 'This expression is always True: `$X == $X` or `$X != $X`. If testing for
    floating point NaN, use `math.isnan($X)`, or `cmath.isnan($X)` if the number is
    complex.'
  languages:
  - python
  severity: ERROR
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.useless-eqeq.useless-eqeq
- id: python.lang.maintainability.return.return-not-in-function
  patterns:
  - pattern-not-inside: |
      def $F(...):
          ...
      # TODO: first pattern should just automatically include this one
  - pattern-not-inside: |
      def $F(...) ->  $Y:
          ...
  - pattern: return ...
  message: '`return` only makes sense inside a function'
  languages:
  - python
  severity: WARNING
  metadata:
    category: maintainability
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.maintainability.return.return-not-in-function
- id: python.lang.correctness.baseclass-attribute-override.baseclass-attribute-override
  message: |
    Class $C inherits from both `$A` and `$B` which both have a method named
    `$F`; one of these methods will be overwritten.
  languages:
  - python
  severity: WARNING
  pattern: |
    class $A(...):
      def $F(...):
       ...
    ...
    class $B(...):
      def $F(...):
       ...
    ...
    class $C(..., $A, $B, ...):
       ...
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.baseclass-attribute-override.baseclass-attribute-override
- id: javascript.lang.best-practice.leftover_debugging.javascript-alert
  message: found alert() call; should this be in production code?
  languages:
  - javascript
  - typescript
  severity: WARNING
  pattern-either:
  - pattern: alert()
  - pattern: alert($X)
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.best-practice.leftover_debugging.javascript-alert
- id: ocaml.lang.correctness.useless_let.useless-let
  pattern: let $X = $E in $X
  message: Useless let
  languages:
  - ocaml
  severity: ERROR
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.correctness.useless_let.useless-let
- id: python.django.best-practice.json_response.use-json-response
  patterns:
  - pattern-inside: |
      def $X(...):
        ...
  - pattern: |
      $Y = json.dumps(...)
      ...
      django.http.HttpResponse($Y, ...)
  message: Use JsonResponse instead
  languages:
  - python
  severity: ERROR
  metadata:
    category: best-practice
    technology:
    - django
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.best-practice.json_response.use-json-response
- id: python.lang.correctness.tempfile.flush.tempfile-without-flush
  languages:
  - python
  message: Using '$F.name' without '.flush()' or '.close()' may cause an error because
    the file may not exist when '$F.name' is used. Use '.flush()' or close the file
    before using '$F.name'.
  pattern-either:
  - patterns:
    - pattern-not-inside: |
        $F = tempfile.NamedTemporaryFile(...)
        ...
        $F.write(...)
        ...
        $F.flush()
        ...
        $F.name
    - pattern-not-inside: |
        $F = tempfile.NamedTemporaryFile(...)
        ...
        $F.write(...)
        ...
        $F.close()
        ...
        $F.name
    - pattern-not-inside: |
        $F = tempfile.NamedTemporaryFile(..., delete=False, ...)
        ...
        $F.close()
        ...
        $F.name
    - pattern-inside: |
        $F = tempfile.NamedTemporaryFile(...)
        ...
    - pattern: |
        $F.name
  - patterns:
    - pattern-not-inside: |
        with tempfile.NamedTemporaryFile(...) as $F:
            ...
            $F.write(...)
            ...
            $F.flush()
            ...
            $F.name
    - pattern-not-inside: |
        with tempfile.NamedTemporaryFile(...) as $F:
            ...
            $F.write(...)
            ...
            $F.close()
            ...
            $F.name
    - pattern-not-inside: |
        with tempfile.NamedTemporaryFile(...) as $F:
            ...
            $MODULE.dump(..., $F, ...)
            ...
            $F.flush()
            ...
            $F.name
    - pattern-not-inside: |
        with tempfile.NamedTemporaryFile(...) as $F:
            ...
            $MODULE.dump(..., $F, ...)
            ...
            $F.close()
            ...
            $F.name
    - pattern-inside: |
        with tempfile.NamedTemporaryFile(...) as $F:
            ...
    - pattern: |
        $F.name
  severity: ERROR
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.tempfile.flush.tempfile-without-flush
- id: javascript.lang.best-practice.leftover_debugging.javascript-debugger
  pattern: debugger;
  message: found debugger call; should this be in production code?
  languages:
  - javascript
  - typescript
  severity: WARNING
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.best-practice.leftover_debugging.javascript-debugger
- id: python.lang.correctness.writing-to-file-in-read-mode.writing-to-file-in-read-mode
  message: |
    The file object '$FD' was opened in read mode, but is being
    written to. This will cause a runtime error.
  patterns:
  - pattern-either:
    - pattern-inside: |
        $FD = open($NAME, "r", ...)
        ...
    - pattern-inside: |
        $FD = open($NAME, "rb", ...)
        ...
    - pattern-inside: |
        with open($NAME, "r", ...) as $FD:
          ...
    - pattern-inside: |
        with open($NAME, "rb", ...) as $FD:
          ...
  - pattern: $FD.write(...)
  severity: ERROR
  languages:
  - python
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.writing-to-file-in-read-mode.writing-to-file-in-read-mode
- id: python.lang.compatibility.python36.python36-compatibility-ssl
  pattern: ssl.get_ciphers()
  message: this function is only available on Python 3.6+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python36.python36-compatibility-ssl
- id: python.lang.best-practice.pass-body.pass-body-range
  pattern: |
    for $X in $Y:
        pass
  message: '`pass` is the body of for $X in $Y. Consider removing this or raise NotImplementedError()
    if this is a TODO'
  languages:
  - python
  severity: WARNING
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.best-practice.pass-body.pass-body-range
- id: go.lang.correctness.useless-eqeq.hardcoded-eq-true-or-false
  message: useless if statement, always the same behavior
  languages:
  - go
  severity: ERROR
  pattern-either:
  - pattern: if (true) { ... }
  - pattern: if (false) { ... }
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.correctness.useless-eqeq.hardcoded-eq-true-or-false
- id: python.lang.correctness.common-mistakes.string-concat-in-list.string-concat-in-list
  patterns:
  - pattern-either:
    - pattern-inside: '[...]'
    - pattern-inside: '{...}'
  - pattern: '"..." "..."'
  - pattern-not-inside: f"..."
  - pattern-not-inside: '{..., $KEY: $VALUE, ...}'
  message: |
    Detected strings that are implicitly concatenated inside a list.
    Python will implicitly concatenate strings when not explicitly delimited.
    Was this supposed to be individual elements of the list?
  severity: WARNING
  languages:
  - python
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.common-mistakes.string-concat-in-list.string-concat-in-list
- id: javascript.lang.best-practice.leftover_debugging.javascript-confirm
  pattern: confirm(...)
  message: found conform() call; should this be in production code?
  languages:
  - javascript
  - typescript
  severity: WARNING
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.best-practice.leftover_debugging.javascript-confirm
- id: python.lang.correctness.useless-comparison.no-strings-as-booleans
  message: |
    Using strings as booleans in Python has unexpected results.
    `"one" and "two"` will return "two".
    `"one" or "two"` will return "one".
     In Python, strings are truthy, and strings with a non-zero length evaluate to True.
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: |
      if <... "..." and ... ...>:
          ...
  - pattern: |
      if <... "..." or ... ...>:
          ...
  - patterns:
    - pattern-not: |
        if $X in "...":
          ...
    - pattern: |
        if "...":
            ...
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.useless-comparison.no-strings-as-booleans
- id: python.lang.compatibility.python37.python37-compatibility-importlib3
  pattern: import importlib.abc.ResourceReader
  message: this module is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-importlib3
- id: python.lang.compatibility.python37.python37-compatibility-os1
  pattern: os.preadv(...)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-os1
- id: javascript.lang.best-practice.leftover_debugging.javascript-prompt
  message: found prompt() call; should this be in production code?
  languages:
  - javascript
  - typescript
  severity: WARNING
  pattern-either:
  - pattern: prompt()
  - pattern: prompt($X)
  - pattern: prompt($X, $Y)
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.best-practice.leftover_debugging.javascript-prompt
- id: python.lang.best-practice.pdb.python-debugger-found
  pattern-either:
  - pattern: import pdb
  - pattern: pdb.set_trace()
  message: Importing the python debugger; did you mean to leave this in?
  severity: WARNING
  languages:
  - python
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.best-practice.pdb.python-debugger-found
- id: ocaml.lang.best-practice.string.ocamllint-str-string-after
  pattern: String.sub $S $N (String.length $S - $N)
  message: Use instead `Str.string_after`
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.best-practice.string.ocamllint-str-string-after
- id: ocaml.lang.best-practice.ref.ocamllint-ref-decr
  pattern: $X := $X - 1
  message: You should use `decr
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.best-practice.ref.ocamllint-ref-decr
- id: python.lang.compatibility.python37.python37-compatibility-multiprocess1
  pattern: multiprocessing.Process.close()
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-multiprocess1
- id: python.lang.compatibility.python37.python37-compatibility-math1
  pattern: math.remainder($X, $Y)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-math1
- id: python.lang.best-practice.missing-hash-with-eq.missing-hash-with-eq
  patterns:
  - pattern-not-inside: |
      class A(...):
          ...
          def __hash__(self):
              ...
          ...
          def __eq__(self, $O):
              ...
  - pattern: |
      class A(...):
        ...
        def __eq__(self, $O): ...
        ...
  message: 'Class `$A` has defined `__eq__` which means it should also have defined
    `__hash__`; '
  languages:
  - python
  severity: WARNING
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.best-practice.missing-hash-with-eq.missing-hash-with-eq
- id: ocaml.lang.best-practice.ref.ocamllint-ref-incr
  pattern: $X := $X + 1
  message: You should use `incr`
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.best-practice.ref.ocamllint-ref-incr
- id: python.flask.best-practice.get-class-method-with-side-effects.flask-class-method-get-side-effects
  patterns:
  - pattern-either:
    - pattern: |
        def get(self,...):
            ...
            $METHOD(...)
    - pattern: |
        def get(self,...):
            ...
            $VAR = $METHOD(...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: (?i)(create|update|delete).*
  message: |
    Flask class method GET with side effects
  severity: WARNING
  languages:
  - python
  metadata:
    category: best-practice
    technology:
    - flask
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.best-practice.get-class-method-with-side-effects.flask-class-method-get-side-effects
- id: ocaml.lang.correctness.physical_vs_structural.physical-equal
  pattern: $X == $Y
  message: You probably want the structural inequality operator =
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.correctness.physical_vs_structural.physical-equal
- id: python.lang.best-practice.sleep.arbitrary-sleep
  patterns:
  - pattern-not: time.sleep($F(...))
  - pattern-either:
    - pattern: |
        time.sleep($X: int)
    - pattern: |
        time.sleep($X: float)
  message: time.sleep() call; did you mean to leave this in?
  languages:
  - python
  severity: ERROR
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.best-practice.sleep.arbitrary-sleep
- id: python.lang.correctness.common-mistakes.is-not-is-not.is-not-is-not
  message: |
    In Python 'X is not ...' is different from 'X is (not ...)'.
    In the latter the 'not' converts the '...' directly to boolean.
  languages:
  - python
  severity: ERROR
  pattern: $S is (not ...)
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.common-mistakes.is-not-is-not.is-not-is-not
- id: python.lang.maintainability.useless-literal.useless-literal-dict
  message: key `$X` is uselessly assigned twice
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: |
      {..., $X: $A, ..., $X: $B, ...}
  - pattern: |
      dict(..., ($X, $A), ..., ($X, $B), ...)
  metadata:
    category: maintainability
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.maintainability.useless-literal.useless-literal-dict
- id: python.lang.correctness.common-mistakes.is-comparison-string.string-is-comparison
  patterns:
  - pattern-not: $S is None
  - pattern-not: type($X) is $T
  - pattern-not: $S is True
  - pattern-not: $S is False
  - pattern-not: $S is ""
  - pattern-either:
    - pattern: $S is "..."
    - pattern: '"..." is $S'
  message: |
    Found string comparison using 'is' operator. The 'is' operator
    is for reference equality, not value equality, and therefore should
    not be used to compare strings. For more information, see
    https://github.com/satwikkansal/wtfpython#-how-not-to-use-is-operator"
  languages:
  - python
  severity: ERROR
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.common-mistakes.is-comparison-string.string-is-comparison
- id: ocaml.lang.correctness.useless_eq.useless-equal
  pattern: $X = $X
  message: This is always true. If testing for floating point NaN, use `Float.is_nan`
    instead.
  languages:
  - ocaml
  severity: ERROR
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.correctness.useless_eq.useless-equal
- id: python.django.correctness.string-field-null-checks.no-null-string-field
  patterns:
  - pattern-inside: |
      class $M(...):
        ...
  - pattern-not: $F = django.db.models.CharField(..., null=True, unique=True, blank=True,
      ...)
  - pattern-not: $F = django.db.models.TextField(..., null=True, unique=True, blank=True,
      ...)
  - pattern-either:
    - pattern: $F = django.db.models.CharField(..., null=True, ...)
    - pattern: $F = django.db.models.TextField(..., null=True, ...)
  message: |
    Avoid using null on string-based fields such as CharField and TextField. If a string-based field
    has null=True, that means it has two possible values for "no data": NULL, and the empty string. In
    most cases, it's redundant to have two possible values for "no data;" the Django convention is to
    use the empty string, not NULL.
  languages:
  - python
  severity: WARNING
  metadata:
    category: correctness
    technology:
    - django
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field
- id: python.lang.best-practice.manual-collections-create.manual-defaultdict-dict-create
  message: manually creating a defaultdict - use collections.defaultdict(dict)
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: |
      $DICT = {}
      ...
      for $KEY, $VALUE in $OTHERDICT.items():
          ...
          if $KEY not in $DICT:
              ...
              $DICT[$KEY] = {}
              ...
          $DICT[$KEY].update(...)
  - pattern: |
      $DICT = {}
      ...
      for $KEY, $VALUE in $OTHERDICT.items():
          ...
          $DICT.setdefault($KEY, {}).update(...)
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.best-practice.manual-collections-create.manual-defaultdict-dict-create
- id: python.lang.compatibility.python37.python37-compatibility-ipv6network1
  pattern: ipaddress.IPv6Network.subnet_of($X)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-ipv6network1
- id: python.lang.correctness.exit.use-sys-exit
  languages:
  - python
  message: Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper
    for the interactive shell and may not be available on all Python implementations.
    https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python
  patterns:
  - pattern: exit(...)
  - pattern-not: sys.exit(...)
  severity: WARNING
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.exit.use-sys-exit
- id: ocaml.lang.best-practice.ifs.ocamllint-backwards-if
  pattern: if $E then () else $E2
  message: Backwards if. Rewrite the code as 'if not $E then $E2'.
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.best-practice.ifs.ocamllint-backwards-if
- id: python.lang.compatibility.python37.python37-compatibility-httpconn
  pattern: http.client.HTTPConnection(blocksize=$X,...)
  message: HTTPConnection blocksize keyword argument is Python 3.7+ only
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-httpconn
- id: python.click.best-practice.echo-style.use-click-secho
  pattern: click.echo(click.style($X, ...))
  message: Use `click.secho($X)` instead. It combines click.echo() and click.style().
  languages:
  - python
  severity: ERROR
  metadata:
    category: best-practice
    technology:
    - click
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.click.best-practice.echo-style.use-click-secho
- id: python.lang.best-practice.manual-collections-create.manual-defaultdict-set-create
  message: manually creating a defaultdict - use collections.defaultdict(set)
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: |
      $DICT = {}
      ...
      for $KEY, $VALUE in $OTHERDICT.items():
          ...
          if $KEY not in $DICT:
              ...
              $DICT[$KEY] = set()
              ...
          $DICT[$KEY].add(...)
  - pattern: |
      $DICT = {}
      ...
      for $KEY, $VALUE in $OTHERDICT.items():
          ...
          $DICT.setdefault($KEY, set()).add(...)
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.best-practice.manual-collections-create.manual-defaultdict-set-create
- id: ocaml.lang.best-practice.string.ocamllint-str-last-chars
  pattern: String.sub $S (String.length $S - $N) $N
  message: Use instead `Str.last_chars`
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.best-practice.string.ocamllint-str-last-chars
- id: ocaml.lang.compatibility.deprecated.deprecated-pervasives
  pattern: Pervasives.$X
  message: Pervasives is deprecated and will not be available after 4.10. Use Stdlib.
  languages:
  - ocaml
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.compatibility.deprecated.deprecated-pervasives
- id: ocaml.lang.best-practice.string.ocamllint-str-first-chars
  pattern: String.sub $S 0 $N
  message: Use instead `Str.first_chars`
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.best-practice.string.ocamllint-str-first-chars
- id: python.requests.best-practice.use-raise-for-status.use-raise-for-status
  patterns:
  - pattern-either:
    - pattern: requests.request(...)
    - pattern: requests.get(...)
    - pattern: requests.post(...)
    - pattern: requests.put(...)
    - pattern: requests.delete(...)
    - pattern: requests.head(...)
    - pattern: requests.patch(...)
  - pattern-not-inside: |
      $RESP = requests.$METHOD(...)
      $RESP.raise_for_status(...)
  - pattern-not-inside: |
      requests.$METHOD(...).raise_for_status(...)
  - pattern-not-inside: |
      $RESP = requests.$METHOD(...)
      if $RESP.status_code == ...:
        ...
  - pattern-not-inside: |
      $RESP = requests.$METHOD(...)
      if $RESP.status_code != ...:
        ...
  - pattern-not-inside: |
      $RESP = requests.$METHOD(...)
      ...
      if $RESP.ok:
        ...
  - pattern-not-inside: |
      $RESP = requests.$METHOD(...)
      ...
      if not $RESP.ok:
        ...
  message: |-
    There's an HTTP request made with requests,
    but the raise_for_status() utility method isn't used.
    This can result in request errors going unnoticed
    and your code behaving in unexpected ways,
    such as if your authorization API returns a 500 error
    while you're only checking for a 401.
  metadata:
    references:
    - https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status
    category: best-practice
    technology:
    - requests
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status
  severity: WARNING
  languages:
  - python
- id: python.lang.compatibility.python37.python37-compatibility-httpsconn
  pattern: http.client.HTTPSConnection(blocksize=$X,...)
  message: HTTPSConnection blocksize keyword argument is Python 3.7+ only
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-httpsconn
- id: ocaml.lang.best-practice.list.list-find-outside-try
  patterns:
  - pattern: |
      List.find ...
  - pattern-not-inside: |
      try ... with ... -> ...
  message: You should not use List.find outside of a try, or you should use List.find_opt
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.best-practice.list.list-find-outside-try
- id: python.lang.compatibility.python37.python37-compatibility-textiowrapper
  pattern: TextIOWrapper.reconfigure(...)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-textiowrapper
- id: python.lang.best-practice.manual-collections-create.manual-defaultdict-list-create
  message: manually creating a defaultdict - use collections.defaultdict(list)
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: |
      $DICT = {}
      ...
      for $KEY, $VALUE in $OTHERDICT.items():
          ...
          if $KEY not in $DICT:
              ...
              $DICT[$KEY] = []
              ...
          $DICT[$KEY].append(...)
  - pattern: |
      $DICT = {}
      ...
      for $KEY, $VALUE in $OTHERDICT.items():
          ...
          $DICT.setdefault($KEY, []).append(...)
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.best-practice.manual-collections-create.manual-defaultdict-list-create
- id: python.django.performance.upsell-count.use-count-method
  message: Looks like you need to determine the number of records. Django provides
    the count() method which is more efficient than .len(). See https://docs.djangoproject.com/en/3.0/ref/models/querysets/
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: $X.objects.$FUNC(...).len()
  - pattern: $X.objects.$FUNC(...).$FILTER().len()
  - pattern: $X.objects.$FUNC(...).$FILTER().$UPDATE(...).len()
  metadata:
    category: performance
    technology:
    - django
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.performance.upsell-count.use-count-method
- id: python.bokeh.maintainability.deprecated.deprecated_apis.bokeh-deprecated-apis
  message: |
    These APIs are deprecated in Bokeh see https://docs.bokeh.org/en/latest/docs/releases.html#api-deprecations
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: |
      import bokeh.layouts.widgetbox
  - pattern: |
      import bokeh.models.graphs.from_networkx
  metadata:
    category: maintainability
    technology:
    - bokeh
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.bokeh.maintainability.deprecated.deprecated_apis.bokeh-deprecated-apis
- id: python.lang.best-practice.manual-collections-create.manual-counter-create
  pattern: |
    $DICT = {}
    ...
    for $KEY, $VALUE in $OTHERDICT.items():
        ...
        if $KEY not in $DICT:
            ...
            $DICT[$KEY] = 0
            ...
        $DICT[$KEY] += 1
  message: manually creating a counter - use collections.Counter
  languages:
  - python
  severity: WARNING
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.best-practice.manual-collections-create.manual-counter-create
- id: python.lang.best-practice.open-never-closed.open-never-closed
  patterns:
  - pattern-not-inside: |
      $F = open(...)
      ...
      $F.close()
  - pattern-not-inside: |
      $F = io.open(...)
      ...
      $F.close()
  - pattern-not-inside: |
      $F = tarfile.open(...)
      ...
      $F.close()
  - pattern-not-inside: |
      $F = ZipFile.open(...)
      ...
      $F.close()
  - pattern-not-inside: |
      $F = tempfile.TemporaryFile(...)
      ...
      $F.close()
  - pattern-not-inside: |
      $F = tempfile.NamedTemporaryFile(...)
      ...
      $F.close()
  - pattern-not-inside: |
      $F = tempfile.SpooledTemporaryFile(...)
      ...
      $F.close()
  - pattern-not-inside: |
      $F = open(...)
      ...
      try:
          ...
      finally:
          $F.close()
  - pattern-not-inside: |
      $F = io.open(...)
      ...
      try:
          ...
      finally:
          $F.close()
  - pattern-not-inside: |
      $F = tarfile.open(...)
      ...
      try:
          ...
      finally:
          $F.close()
  - pattern-not-inside: |
      $F = ZipFile.open(...)
      ...
      try:
          ...
      finally:
          $F.close()
  - pattern-not-inside: |
      $F = tempfile.TemporaryFile(...)
      ...
      try:
          ...
      finally:
          $F.close()
  - pattern-not-inside: |
      $F = tempfile.NamedTemporaryFile(...)
      ...
      try:
          ...
      finally:
          $F.close()
  - pattern-not-inside: |
      $F = tempfile.SpooledTemporaryFile(...)
      ...
      try:
          ...
      finally:
          $F.close()
  - pattern-either:
    - pattern: $F = open(...)
    - pattern: $F = io.open(...)
    - pattern: $F = tarfile.open(...)
    - pattern: $F = ZipFile.open(...)
    - pattern: $F = tempfile.TemporaryFile(...)
    - pattern: $F = tempfile.NamedTemporaryFile(...)
    - pattern: $F = tempfile.SpooledTemporaryFile(...)
  message: file object opened without corresponding close
  languages:
  - python
  severity: ERROR
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.best-practice.open-never-closed.open-never-closed
- id: go.lang.maintainability.useless-ifelse.useless-if-conditional
  message: |
    Detected an if block that checks for the same condition on both branches (`$X`)
  languages:
  - go
  severity: WARNING
  pattern: |
    if ($X) {
        ...
    } else if ($X) {
        ...
    }
  metadata:
    category: maintainability
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.maintainability.useless-ifelse.useless-if-conditional
- id: python.lang.compatibility.python37.python37-compatibility-locale1
  pattern: locale.format_string(monetary=$X, ...)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-locale1
- id: python.lang.compatibility.python37.python37-compatibility-importlib
  pattern: importlib.source_hash()
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-importlib
- id: python.attr.correctness.mutable-initializer.attr-mutable-initializer
  patterns:
  - pattern-not-inside: |
      def $Y(...):
        ...
  - pattern-not-inside: |
      def $Y(...) -> $TYPE:
        ...
  - pattern-inside: |
      @attr.s(...,auto_attribs=True, ...)
      class $X(...):
        ...
  - pattern-either:
    - pattern: |
        $M = {...}
    - pattern: $M = [...]
    - pattern: $M = list(...)
    - pattern: $M = set(...)
    - pattern: $M = dict(...)
  message: |
    Unsafe usage of mutable initializer with attr.s decorator.
    Multiple instances of this class will re-use the same data structure, which is likely not the desired behavior.
    Consider instead: replace assignment to mutable initializer (ex. dict() or {}) with attr.ib(factory=type) where type is dict, set, or list
  severity: WARNING
  languages:
  - python
  metadata:
    category: correctness
    technology:
    - attr
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.attr.correctness.mutable-initializer.attr-mutable-initializer
- id: python.sqlalchemy.correctness.delete-where.delete-where-no-execute
  patterns:
  - pattern: $X.delete().where(...)
  - pattern-not-inside: $X.delete().where(...).execute()
  - pattern-not-inside: $C.execute(...)
  message: .delete().where(...) results in a no-op in SQLAlchemy unless the command
    is executed, use .filter(...).delete() instead.
  languages:
  - python
  severity: ERROR
  metadata:
    category: correctness
    technology:
    - sqlalchemy
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.sqlalchemy.correctness.delete-where.delete-where-no-execute
- id: ocaml.lang.performance.list.ocamllint-length-list-zero
  pattern: List.length $X = 0
  message: You probably want $X = [], which is faster.
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: performance
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.performance.list.ocamllint-length-list-zero
- id: python.lang.compatibility.python37.python37-compatibility-multiprocess2
  pattern: multiprocessing.Process.kill()
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-multiprocess2
- id: python.lang.correctness.dict-modify-iterating.dict-del-while-iterate
  message: 'It appears that `$DICT[$KEY]` is a dict with items being deleted while
    in a for loop. This is usually a bad idea and will likely lead to a RuntimeError:
    dictionary changed size during iteration'
  metadata:
    references:
    - https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.dict-modify-iterating.dict-del-while-iterate
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: |
      for $KEY, $VALUE in $DICT.items():
          ...
          del $DICT[$KEY]
  - pattern: |
      for $KEY in $DICT.keys():
          ...
          del $DICT[$KEY]
- id: ocaml.lang.best-practice.ifs.ocamllint-useless-else
  pattern: if $E then $E1 else ()
  message: Useless else. Just remove the else branch;
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.best-practice.ifs.ocamllint-useless-else
- id: python.lang.compatibility.python37.python37-compatibility-ipv4network2
  pattern: ipaddress.IPv4Network.supernet_of($X)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-ipv4network2
- id: python.lang.compatibility.python37.python37-compatibility-ipv4network1
  pattern: ipaddress.IPv4Network.subnet_of($X)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-ipv4network1
- id: python.django.compatibility.django-2_0-compat.django-compat-2_0-signals-weak
  pattern: django.dispatch.signals.Signal.disconnect(..., weak=$X, ...)
  message: The weak argument to django.dispatch.signals.Signal.disconnect() is removed
    in Django 2.0.
  languages:
  - python
  severity: WARNING
  metadata:
    category: compatibility
    technology:
    - django
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.compatibility.django-2_0-compat.django-compat-2_0-signals-weak
- id: python.sqlalchemy.performance.performance-improvements.len-all-count
  pattern: len($X.all())
  message: Using QUERY.count() instead of len(QUERY.all()) sends less data to the
    client since the SQLAlchemy method is performed server-side.
  languages:
  - python
  severity: WARNING
  metadata:
    category: performance
    technology:
    - sqlalchemy
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.sqlalchemy.performance.performance-improvements.len-all-count
- id: python.flask.maintainability.deprecated.deprecated-apis.flask-deprecated-apis
  message: deprecated Flask API
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: |
      $F = Flask(...)
      ...
      $F.open_session(...)
  - pattern: |
      $F = Flask(...)
      ...
      $F.save_session(...)
  - pattern: |
      $F = Flask(...)
      ...
      $F.make_null_session(...)
  - pattern: |
      $F = Flask(...)
      ...
      $F.init_jinja_globals(...)
  - pattern: |
      $F = Flask(...)
      ...
      $F.request_globals_class(...)
  - pattern: |
      $F = Flask(...)
      ...
      $F.static_path(...)
  - pattern: app.open_session(...)
  - pattern: app.save_session(...)
  - pattern: app.make_null_session(...)
  - pattern: app.init_jinja_globals(...)
  - pattern: app.request_globals_class(...)
  - pattern: app.static_path(...)
  - pattern: app.config.from_json(...)
  - pattern: flask.json_available
  - pattern: flask.request.module
  - pattern: flask.testing.make_test_environ_builder(...)
  metadata:
    category: maintainability
    technology:
    - flask
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.maintainability.deprecated.deprecated-apis.flask-deprecated-apis
- id: python.lang.maintainability.useless-literal.useless-literal-set
  pattern: |
    set(..., ($X, $A), ..., ($X, $B), ...)
  message: '`$X` is uselessly assigned twice inside the creation of the set'
  languages:
  - python
  severity: ERROR
  metadata:
    category: maintainability
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.maintainability.useless-literal.useless-literal-set
- id: ocaml.lang.best-practice.bool.ocamllint-bool-false
  pattern-either:
  - pattern: $X = false
  - pattern: $X == false
  - pattern: $X <> true
  message: Comparison to boolean. Just use `not $X`
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.best-practice.bool.ocamllint-bool-false
- id: python.django.compatibility.django-2_0-compat.django-compat-2_0-check-aggregate-support
  pattern: django.db.backends.base.BaseDatabaseOperations.check_aggregate_support(...)
  message: django.db.backends.base.BaseDatabaseOperations.check_aggregate_support()
    is removed in Django 2.0.
  languages:
  - python
  severity: WARNING
  metadata:
    category: compatibility
    technology:
    - django
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.compatibility.django-2_0-compat.django-compat-2_0-check-aggregate-support
- id: python.requests.best-practice.use-timeout.use-timeout
  patterns:
  - pattern-not: requests.$W(..., timeout=$N, ...)
  - pattern-not: requests.$W(..., **$KWARGS)
  - pattern-not: |
      $SESSION = requests.Session(...)
      ...
      $SESSION.$W(..., timeout=$N, ...)
  - pattern-not: |
      $SESSION = requests.Session(...)
      ...
      $SESSION.$W(..., **$KWARGS)
  - pattern-either:
    - pattern: requests.request(...)
    - pattern: requests.get(...)
    - pattern: requests.post(...)
    - pattern: requests.put(...)
    - pattern: requests.delete(...)
    - pattern: requests.head(...)
    - pattern: requests.patch(...)
    - pattern: |
        $SESSION = requests.Session(...)
        ...
        $SESSION.get(...)
    - pattern: |
        $SESSION = requests.Session(...)
        ...
        $SESSION.post(...)
    - pattern: |
        $SESSION = requests.Session(...)
        ...
        $SESSION.put(...)
    - pattern: |
        $SESSION = requests.Session(...)
        ...
        $SESSION.delete(...)
    - pattern: |
        $SESSION = requests.Session(...)
        ...
        $SESSION.head(...)
    - pattern: |
        $SESSION = requests.Session(...)
        ...
        $SESSION.patch(...)
  fix-regex:
    regex: (.*)\)
    replacement: \1, timeout=30)
  message: |
    By default, 'requests' calls wait until the connection is closed.
    This means a 'requests' call without a timeout will hang the program
    if a response is never received. Consider setting a timeout for all
    'requests'.
  languages:
  - python
  severity: WARNING
  metadata:
    category: best-practice
    technology:
    - requests
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout
- id: ocaml.lang.best-practice.hashtbl.hashtbl-find-outside-try
  patterns:
  - pattern: |
      Hashtbl.find ...
  - pattern-not-inside: |
      try ... with ... -> ...
  message: You should not use Hashtbl.find outside of a try, or you should use Hashtbl.find_opt
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.best-practice.hashtbl.hashtbl-find-outside-try
- id: ocaml.lang.correctness.physical_vs_structural.physical-not-equal
  pattern: $X != $Y
  message: You probably want the structural inequality operator <>
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.correctness.physical_vs_structural.physical-not-equal
- id: python.sqlalchemy.performance.performance-improvements.batch-import
  pattern: |
    for $X in $Y:
      db.session.add($Z)
  message: Rather than adding one element at a time, consider batch loading to improve
    performance.
  languages:
  - python
  severity: WARNING
  metadata:
    category: performance
    technology:
    - sqlalchemy
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.sqlalchemy.performance.performance-improvements.batch-import
- id: ocaml.lang.performance.list.ocamllint-length-more-than-zero
  pattern: List.length $X > 0
  message: You probably want $X <> [], which is faster.
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: performance
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.performance.list.ocamllint-length-more-than-zero
- id: ocaml.lang.best-practice.bool.ocamllint-bool-true
  pattern-either:
  - pattern: $X = true
  - pattern: $X == true
  - pattern: $X != false
  message: Comparison to boolean. Just use `$X`
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.best-practice.bool.ocamllint-bool-true
- id: python.lang.compatibility.python37.python37-compatibility-ipv6network2
  pattern: ipaddress.IPv6Network.supernet_of($X)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-ipv6network2
- id: python.lang.correctness.common-mistakes.default-mutable-list.default-mutable-list
  message: 'Function $F mutates default list $D. Python only instantiates default
    function arguments once and shares the instance across the function calls. If
    the default function argument is mutated, that will modify the instance used by
    all future function calls. This can cause unexpected results, or lead to security
    vulnerabilities whereby one function consumer can view or modify the data of another
    function consumer. Instead, use a default argument (like None) to indicate that
    no argument was provided and instantiate a new list at that time. For example:
    `if $D is None: $D = []`.'
  languages:
  - python
  severity: ERROR
  pattern-either:
  - patterns:
    - pattern: |
        def $F(..., $D=[], ...):
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = []
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = [...]
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = list(...)
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = copy.deepcopy($D)
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = copy.copy($D)
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = list.copy($D)
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = $D[:]
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = [... for ... in ...]
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = $D or []
          ...
          $D.append(...)
    - pattern-not-inside: |
        def $A(...):
          ...
          def $F(..., $D=[], ...):
            ...
            $D.append(...)
  - patterns:
    - pattern: |
        def $F(..., $D=[], ...):
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = []
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = [...]
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = list(...)
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = copy.deepcopy($D)
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = copy.copy($D)
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = list.copy($D)
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = $D[:]
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = [... for ... in ...]
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = $D or []
          ...
          $D.extend(...)
    - pattern-not-inside: |
        def $A(...):
          ...
          def $F(..., $D=[], ...):
            ...
            $D.extend(...)
  - patterns:
    - pattern: |
        def $F(..., $D=[], ...):
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = []
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = [...]
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = list(...)
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = copy.deepcopy($D)
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = copy.copy($D)
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = list.copy($D)
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = $D[:]
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = [... for ... in ...]
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = $D or []
          ...
          $D.insert(...)
    - pattern-not-inside: |
        def $A(...):
          ...
          def $F(..., $D=[], ...):
            ...
            $D.insert(...)
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.common-mistakes.default-mutable-list.default-mutable-list
- id: python.django.compatibility.django-2_0-compat.django-compat-2_0-extra-forms
  message: The django.forms.extras package is removed in Django 2.0.
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: from django.forms import extras
  - pattern: from django.forms.extras import $X
  - pattern: from django.forms import extras as $Y
  - pattern: from django.forms.extras import $X as $Y
  - pattern: import django.forms.extras
  - pattern: import django.forms.extras.$X
  - pattern: import django.forms.extras as $Y
  - pattern: import django.forms.extras.$X as $Y
  metadata:
    category: compatibility
    technology:
    - django
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.compatibility.django-2_0-compat.django-compat-2_0-extra-forms
- id: ocaml.lang.best-practice.string.ocamllint-useless-sprintf
  pattern-either:
  - pattern: Printf.sprintf "..."
  - pattern: Printf.sprintf "%s" $S
  message: Useless sprintf
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: best-practice
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.best-practice.string.ocamllint-useless-sprintf
- id: python.lang.correctness.pdb.pdb-remove
  pattern-either:
  - pattern: pdb.$X(...)
  - pattern: pdb.Pdb.$X(...)
  message: |
    pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code
  languages:
  - python
  severity: WARNING
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.pdb.pdb-remove
- id: python.django.correctness.string-field-null-checks.string-field-must-set-null-true
  patterns:
  - pattern-inside: |
      class $M(...):
        ...
  - pattern-not: $F = django.db.models.CharField(..., unique=True, blank=True, null=True,
      ...)
  - pattern-not: $F = django.db.models.TextField(..., unique=True, blank=True, null=True,
      ...)
  - pattern-either:
    - pattern: $F = django.db.models.CharField(..., unique=True, blank=True, ...)
    - pattern: $F = django.db.models.TextField(..., unique=True, blank=True, ...)
  message: If a text field declares unique=True and blank=True, null=True must also
    be set to avoid unique constraint violations when saving multiple objects with
    blank values.
  languages:
  - python
  severity: ERROR
  metadata:
    category: correctness
    technology:
    - django
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.correctness.string-field-null-checks.string-field-must-set-null-true
- id: python.flask.correctness.same-handler-name.flask-duplicate-handler-name
  pattern: |
    @app.route("...", ...)
    def $R(...):
        ...
    ...
    @app.route("...", ...)
    def $R(...):
        ...
  message: Looks like `$R` is a flask function handler that registered to two different
    routes. This will cause a runtime error
  languages:
  - python
  severity: WARNING
  metadata:
    category: correctness
    technology:
    - flask
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.correctness.same-handler-name.flask-duplicate-handler-name
- id: python.django.compatibility.django-2_0-compat.django-compat-2_0-assignment-tag
  message: The assignment_tag helper is removed in Django 2.0.
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: $X.assignment_tag(...)
  - pattern: assignment_tag(...)
  metadata:
    category: compatibility
    technology:
    - django
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.compatibility.django-2_0-compat.django-compat-2_0-assignment-tag
- id: ocaml.lang.portability.slash_tmp.not-portable-tmp-string
  pattern: |
    "=~/\/tmp/"
  message: You should probably use Filename.get_temp_dirname().
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: portability
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.portability.slash_tmp.not-portable-tmp-string
- id: python.django.compatibility.django-2_0-compat.django-compat-2_0-assert-redirects-helper
  message: The host argument to assertRedirects is removed in Django 2.0.
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: $X.assertRedirects(..., host=$Y, ...)
  - pattern: assertRedirects(..., host=$Y, ...)
  metadata:
    category: compatibility
    technology:
    - django
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.compatibility.django-2_0-compat.django-compat-2_0-assert-redirects-helper
- id: go.lang.correctness.useless-eqeq.eqeq-is-bad
  patterns:
  - pattern-not-inside: assert(...)
  - pattern-either:
    - pattern: $X == $X
    - pattern: $X != $X
  - pattern-not: 1 == 1
  message: useless comparison operation `$X == $X` or `$X != $X`
  languages:
  - go
  severity: ERROR
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.correctness.useless-eqeq.eqeq-is-bad
- id: python.lang.correctness.common-mistakes.default-mutable-dict.default-mutable-dict
  message: 'Function $F mutates default dict $D. Python only instantiates default
    function arguments once and shares the instance across the function calls. If
    the default function argument is mutated, that will modify the instance used by
    all future function calls. This can cause unexpected results, or lead to security
    vulnerabilities whereby one function consumer can view or modify the data of another
    function consumer. Instead, use a default argument (like None) to indicate that
    no argument was provided and instantiate a new dictionary at that time. For example:
    `if $D is None: $D = {}`.'
  languages:
  - python
  severity: ERROR
  pattern-either:
  - patterns:
    - pattern: |
        def $F(..., $D={}, ...):
          ...
          $D[...] = ...
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = {}
          ...
          $D[...] = ...
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = dict(...)
          ...
          $D[...] = ...
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = $D.copy()
          ...
          $D[...] = ...
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = copy.deepcopy($D)
          ...
          $D[...] = ...
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = copy.copy($D)
          ...
          $D[...] = ...
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = dict.copy($D)
          ...
          $D[...] = ...
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = {... for ... in ...}
          ...
          $D[...] = ...
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = $D or {}
          ...
          $D[...] = ...
    - pattern-not-inside: |
        def $A(...):
          ...
          def $F(..., $D={}, ...):
            ...
            $D[...] = ...
  - patterns:
    - pattern: |
        def $F(..., $D={}, ...):
          ...
          $D.update(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = {}
          ...
          $D.update(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = dict(...)
          ...
          $D.update(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = $D.copy()
          ...
          $D.update(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = copy.deepcopy($D)
          ...
          $D.update(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = copy.copy($D)
          ...
          $D.update(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = dict.copy($D)
          ...
          $D.update(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = {... for ... in ...}
          ...
          $D.update(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = $D or {}
          ...
          $D.update(...)
    - pattern-not-inside: |
        def $A(...):
          ...
          def $F(..., $D={}, ...):
            ...
            $D.update(...)
  - patterns:
    - pattern: |
        def $F(..., $D={}, ...):
          ...
          $D.setdefault(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = {}
          ...
          $D.setdefault(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = dict(...)
          ...
          $D.setdefault(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = $D.copy()
          ...
          $D.setdefault(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = copy.deepcopy($D)
          ...
          $D.setdefault(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = copy.copy($D)
          ...
          $D.setdefault(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = dict.copy($D)
          ...
          $D.setdefault(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = {... for ... in ...}
          ...
          $D.setdefault(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = $D or {}
          ...
          $D.setdefault(...)
    - pattern-not-inside: |
        def $A(...):
          ...
          def $F(..., $D={}, ...):
            ...
            $D.setdefault(...)
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.common-mistakes.default-mutable-dict.default-mutable-dict
- id: python.sqlalchemy.correctness.bad-operator-in-filter.bad-operator-in-filter
  languages:
  - python
  message: |
    Only comparison operators should be used inside SQLAlchemy filter expressions. Use `==` instead of `is`,
    `!=` instead of `is not`, `sqlalchemy.and_` instead of `and`, `sqlalchemy.or_` instead of `or`,
    `sqlalchemy.not_` instead of `not`, and `sqlalchemy.in_` instead of `in_`.
  metadata:
    references:
    - https://docs.sqlalchemy.org/en/13/orm/tutorial.html#common-filter-operators
    category: correctness
    technology:
    - sqlalchemy
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.sqlalchemy.correctness.bad-operator-in-filter.bad-operator-in-filter
  patterns:
  - pattern-inside: |
      def $ANY(...):
          ...
          $MODEL.query
  - pattern-inside: |
      $TARGET.filter(...)
  - pattern-either:
    - pattern: not $A
    - pattern: $A is $B
    - pattern: $A is not $B
    - pattern: $A and $B
    - pattern: $A or $B
    - pattern: $A in $B
    - pattern: $A not in $B
  severity: WARNING
- id: python.lang.correctness.tempfile.mktemp.tempfile-insecure
  pattern: tempfile.mktemp(...)
  message: 'Use tempfile.NamedTemporaryFile instead. From the official Python documentation:
    THIS FUNCTION IS UNSAFE AND SHOULD NOT BE USED. The file name may refer to a file
    that did not exist at some point, but by the time you get around to creating it,
    someone else may have beaten you to the punch.'
  languages:
  - python
  severity: ERROR
  metadata:
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.correctness.tempfile.mktemp.tempfile-insecure
- id: python.django.performance.upsell_earliest_latest.use-earliest-or-latest
  message: Looks like you are only accessing first element of an ordered QuerySet.
    Use `latest()` or `earliest()` instead. See https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.latest
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: $X.objects.order_by(...)[0]
  - pattern: $X.objects.$FUNC(...).order_by(...)[0]
  - pattern: $X.objects.$FUNC(...).$FILTER(...).order_by(...)[0]
  metadata:
    category: performance
    technology:
    - django
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.performance.upsell_earliest_latest.use-earliest-or-latest
- id: go.lang.maintainability.useless-ifelse.useless-if-body
  pattern: |
    if ($X) {
        $S
    } else {
        $S
    }
  message: |
    Detected identical if-statement bodies. Is this intentional?
  languages:
  - go
  severity: WARNING
  metadata:
    category: maintainability
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.maintainability.useless-ifelse.useless-if-body
